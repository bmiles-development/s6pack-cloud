{
    "StartAt": "GetTenant",
    "States": {
      "GetTenant": {
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:getItem",
        "Parameters": {
          "TableName": "${dataStackName}-Tenants",
          "Key": {
            "Id": {
              "S.$": "$.identity.claims.name"
            }
          }
        },
        "Next": "GetProcessorCustomer",
        "ResultPath": "$.Tenant"
      },
      "GetProcessorCustomer": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "${stripeApiEntity}",
          "Payload": {
            "callback": "getCustomer",
            "customerId.$": "$.Tenant.Item.ProcessorCustomerId.S"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "Next": "SearchForPaymentMethod",
        "ResultPath": "$.getProcessorCustomer"
      },
      "SearchForPaymentMethod": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "${stripeApiEntity}",
          "Payload": {
            "callback": "getPaymentMethod",
            "paymentMethodId.$": "$.arguments.paymentMethodId",
            "customerId.$": "$.Tenant.Item.ProcessorCustomerId.S"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "Next": "SplitSetupIntentIdFromClientSecret",
        "ResultPath": "$.foundPaymentMethod",
        "Catch": [
          {
            "ErrorEquals": [
              "States.TaskFailed"
            ],
            "Next": "CheckIfFoundPaymentMethod",
            "ResultPath": "$.PaymentIdNotFound"
          }
        ]
      },
      "SplitSetupIntentIdFromClientSecret": {
        "Type": "Pass",
        "Next": "ExtractSetupIntentId",
        "ResultPath" : "$.clientSecretSplit",
        "Parameters" : {
          "clientSecretSplit.$": "States.StringSplit($.arguments.setupIntentClientSecret, '_')"
        }
      },
      "ExtractSetupIntentId": {
        "Type": "Pass",
        "Next": "ConfirmSetupIntent",
        "ResultPath" : "$.setupIntentId",
        "Parameters" : {
          "setupIntentId.$": "States.ArrayGetItem($.clientSecretSplit.clientSecretSplit, 1)"
        }
      },
      "ConfirmSetupIntent": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "${stripeApiEntity}",
          "Payload": {
            "callback": "confirmSetupIntent",
            "customerId.$": "$.Tenant.Item.ProcessorCustomerId.S",
            "paymentMethodId.$": "$.arguments.paymentMethodId",
            "setupIntentId.$": "States.Format('seti_{}', $.setupIntentId.setupIntentId)"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "Next": "CheckIfFoundPaymentMethod",
        "ResultPath": "$.confirmSetupIntent"
      },
      "CheckIfFoundPaymentMethod": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.PaymentIdNotFound.Error",
            "IsPresent": true,
            "Next": "AttachPaymentMethod"
          }
        ],
        "Default": "AddDefaultPaymentMethodFalse"
      },
      "AttachPaymentMethod": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "${stripeApiEntity}",
          "Payload": {
            "callback": "attachPaymentMethod",
            "paymentMethodId.$": "$.arguments.paymentMethodId",
            "customerId.$": "$.Tenant.Item.ProcessorCustomerId.S"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "Next": "AddDefaultPaymentMethodFalse",
        "ResultPath": "$.AttachedPaymentMethod"
      },
      "AddDefaultPaymentMethodFalse": {
        "Type": "Pass",
        "Next": "CheckIfDefaultPaymentMethodIsSet",
        "ResultPath" : "$.defaultPaymentMethod",
        "Parameters" : false
      },
      "CheckIfDefaultPaymentMethodIsSet": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.getProcessorCustomer.Payload.invoice_settings.default_payment_method",
            "IsString": true,
            "Next": "DynamoDBGetPlanDetails"
          }
        ],
        "Default": "UpdateProcessorCustomerDefaultPaymentMethod"
      },
      "UpdateProcessorCustomerDefaultPaymentMethod": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "${stripeApiEntity}",
          "Payload": {
            "callback": "setDefaultCustomerPaymentMethod",
            "customerId.$": "$.Tenant.Item.ProcessorCustomerId.S",
            "paymentMethodId.$": "$.arguments.paymentMethodId"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "Next": "AddDefaultPaymentMethodTrue",
        "ResultPath": "$.updateProcessorCustomerDefaultPaymentMethod"
      },
      "AddDefaultPaymentMethodTrue": {
        "Type": "Pass",
        "Next": "DynamoDBGetPlanDetails",
        "ResultPath" : "$.defaultPaymentMethod",
        "Parameters" : false
      },
      "DynamoDBGetPlanDetails": {
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:getItem",
        "ResultPath": "$.Plan",
        "Parameters": {
          "TableName": "${dataStackName}-PricePlans",
          "Key": {
            "Id": {
              "S.$": "$.arguments.planId"
            }
          }
        },
        "Next": "GetCurrentProcessorSubscription"
      },
      "GetCurrentProcessorSubscription": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "${stripeApiEntity}",
          "Payload": {
            "callback": "getCustomerSubscription",
            "customerId.$": "$.Tenant.Item.ProcessorCustomerId.S"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "Next": "CheckIfSubscriptionExists",
        "ResultPath": "$.GetCurrentProcessorSubscription"
      },
      "CheckIfSubscriptionExists": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.GetProcessorSubscription.data.object.plan[0]",
            "IsPresent": true,
            "Next": "SubscriptionAlreadyExistsError"
          }
        ],
        "Default": "GetPriceFromPlanId"
      },
      "SubscriptionAlreadyExistsError" : {
        "Type": "Fail",
        "Error": "SubscriptionAlreadyExists",
        "Cause": "A subscription plan already exists for this user. Use changePlan mutation instead to change an existing plan."
      },
      "GetPriceFromPlanId": {
        "Comment": "Get Plan Price object from Stripe",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "ResultPath": "$.getPriceFromPlanId",
        "Parameters": {
          "FunctionName": "${stripeApiEntity}",
          "Payload": {
            "callback": "getPriceFromProductId",
            "productId.$": "$.Plan.Item.ProcessorPlanId.S"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "CheckTrialPeriodTimestamp"
      },
      "CheckTrialPeriodTimestamp": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.Tenant.Item.TrialPeriodTimestamp.N",
            "IsPresent": false,
            "Next": "SetNull"
          }
        ],
        "Default": "Lambda-TrialPeriodCalculation"
      },
      "SetNull": {
        "Type": "Pass",
        "Next": "Lambda-TrialPeriodCalculation",
        "Parameters": {
          "N": null
        },
        "ResultPath": "$.Tenant.Item.TrialPeriodTimestamp"
      },
      "Lambda-TrialPeriodCalculation": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "ResultPath": "$.trialPeriod",
        "Parameters": {
          "Payload": {
            "trialPeriodTimestamp.$": "$.Tenant.Item.TrialPeriodTimestamp.N"
          },
          "FunctionName": "${trialPeriodCalculationFunction}"
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "StripeCreateSubscriptionCheckTrialPeriod"
      },
      "StripeCreateSubscriptionCheckTrialPeriod": {
        "Comment": "Creates a new Subscription from a Payment IntentObject in Stripe and then updates metadata with the clientId for retrieval in the StripeGetExistingCustomerSubscription step check",
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "ResultPath": "$.createdSubscription",
        "Parameters": {
          "FunctionName": "${stripeApiEntity}",
          "Payload": {
            "callback": "createSubscription",
            "customerId.$": "$.Tenant.Item.ProcessorCustomerId.S",
            "priceId.$": "$.getPriceFromPlanId.Payload.data[0].id",
            "trialPeriodStatus.$": "$.trialPeriod.Payload.trialPeriodStatus",
            "metadata": {
              "customerId.$": "$.Tenant.Item.ProcessorCustomerId.S",
              "planId.$": "$.Plan.Item.Id.S",
              "tenantId.$": "$.Tenant.Item.Id.S" 
            }
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 2,
            "MaxAttempts": 6,
            "BackoffRate": 2
          }
        ],
        "Next": "CheckIfPlanCreated"
      },
      "CheckIfPlanCreated": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.createdSubscription.StatusCode",
            "NumericEquals": 400,
            "Next": "FailedToCreateProcessorSubscription"
          }
        ],
        "Default": "CheckProcessorTrialPeriodTimestamp"
      },
      "FailedToCreateProcessorSubscription": {
        "Type": "Fail",
        "Error": "FailedToCreateProcessorSubscription"
      },

      "CheckProcessorTrialPeriodTimestamp": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.createdSubscription.Payload.trial_start",
            "IsNull": true,
            "Next": "DynamoDBUpdateTenantWithoutTimestamp"
          }
        ],
        "Default": "DynamoDBUpdateTenant"
      },
      "DynamoDBUpdateTenantWithoutTimestamp": {
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:updateItem",
        "ResultPath": "$.pricePlanUpdatedResult",
        "Parameters": {
          "TableName": "${dataStackName}-Tenants",
          "Key": {
            "Id": {
              "S.$": "$.identity.claims.name"
            }
          },
          "UpdateExpression": "SET PlanId = :planId",
          "ExpressionAttributeValues": {
            ":planId": {
              "S.$": "$.arguments.planId"
            }
          }
        },
        "Next": "AdminAddUserToGroup"
      },
      "DynamoDBUpdateTenant": {
        "Type": "Task",
        "Resource": "arn:aws:states:::dynamodb:updateItem",
        "ResultPath": "$.pricePlanUpdatedResult",
        "Parameters": {
          "TableName": "${dataStackName}-Tenants",
          "Key": {
            "Id": {
              "S.$": "$.identity.claims.name"
            }
          },
          "UpdateExpression": "SET PlanId = :planId, TrialPeriodTimestamp = :trialPeriodTimestamp, TrialPeriodDays = :trialPeriodDays",
          "ExpressionAttributeValues": {
            ":planId": {
              "S.$": "$.arguments.planId"
            },
            ":trialPeriodTimestamp":{
              "N.$": "States.Format('{}', $.createdSubscription.Payload.trial_start)"
            },
            ":trialPeriodDays":{
              "N": "${trialPeriodDays}"
            }
          }
        },
        "Next": "AdminAddUserToGroup"
      },
      "AdminAddUserToGroup": {
        "Type": "Task",
        "Parameters": {
          "GroupName": "Owner",
          "UserPoolId": "${cognitoEntity}",
          "Username.$": "$.identity.claims.sub"
        },
        "Resource": "arn:aws:states:::aws-sdk:cognitoidentityprovider:adminAddUserToGroup",
        "Next": "AdminRemoveUserFromGroup",
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "AddOrRemoveFromGroupError"
          }
        ],
        "ResultPath": null
      },
      "AdminRemoveUserFromGroup": {
        "Type": "Task",
        "Parameters": {
          "GroupName": "Free",
          "UserPoolId": "${cognitoEntity}",
          "Username.$": "$.identity.claims.sub"
        },
        "Resource": "arn:aws:states:::aws-sdk:cognitoidentityprovider:adminRemoveUserFromGroup",
        "Catch": [
          {
            "ErrorEquals": [
              "States.ALL"
            ],
            "Next": "AddOrRemoveFromGroupError"
          }
        ],
        "Next": "GetPaymentMethod",
        "ResultPath": null
      },
      "AddOrRemoveFromGroupError": {
        "Type": "Fail",
        "Error": "AddOrRemoveFromGroup",
        "Cause": "Add or Remove From Group Error"
      },
      "GetPaymentMethod": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "${stripeApiEntity}",
          "Payload": {
            "callback": "getPaymentMethod",
            "customerId.$": "$.Tenant.Item.ProcessorCustomerId.S",
            "paymentMethodId.$": "$.arguments.paymentMethodId"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "Next": "SuccessNewPlan",
        "ResultPath": "$.newPaymentMethod"
      },
      "SuccessNewPlan": {
        "Type": "Pass",
        "End": true,
        "Parameters" : {
          "id.$" : "$.identity.claims.name",
          "planId.$": "$.Plan.Item.Id.S",
          "plan.id.$": "$.Plan.Item.Id.S",
          "plan.tenantId.$" : "$.identity.claims.name",
          "plan.title.$": "$.Plan.Item.Title.S",
          "plan.price.$": "$.Plan.Item.Price.N",
          "plan.statementDescriptor.$": "$.Plan.Item.StatementDescriptor.S",
          "plan.featureList.$": "$.Plan.Item.Title.S",
          "plan.totalUsers.$": "$.Plan.Item.TotalUsers.N"
        }
      }
    }
  }
