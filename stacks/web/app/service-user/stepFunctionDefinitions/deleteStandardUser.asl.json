{
    "StartAt": "VerifyTenantUser",
    "States": {
      "VerifyTenantUser": {
        "Type": "Task",
        "Parameters": {
          "UserPoolId": "${cognitoEntity}",
          "Username.$": "$.arguments.id"
        },
        "Resource": "arn:aws:states:::aws-sdk:cognitoidentityprovider:adminGetUser",
        "Next": "IsolateTenantId",
        "ResultPath": "$.User",
        "Catch": [
          {
            "ErrorEquals": [
              "CognitoIdentityProvider.UserNotFoundException"
            ],
            "Next": "FailUserNotFound"
          }
        ]
      },
      "IsolateTenantId": {
        "Type": "Pass",
        "Next": "UnwindTenantId",
        "Parameters": {
          "User.$": "$.User",
          "tenant_id.$": "$.User.UserAttributes[?(@.Name == name)].Value",
          "matching_tenant_id.$": "$.identity.claims.name"
        },
        "ResultPath": "$.input"
      },
      "UnwindTenantId": {
        "Type": "Pass",
        "Next": "CheckUserTenantIdMatchesClient",
        "Parameters": {
          "User.$": "$.User",
          "tenant_id.$": "$.input.tenant_id[0]",
          "matching_tenant_id.$": "$.input.matching_tenant_id"
        },
        "ResultPath": "$.input"
      },
      "FailUserNotFound": {
        "Type": "Fail",
        "Error": "UsernameNotFound",
        "Cause": "Username Not Found"
      },
      "CheckUserTenantIdMatchesClient": {
        "Type": "Choice",
        "Choices": [
          {
            "Variable": "$.input.matching_tenant_id",
            "StringEqualsPath": "$.input.tenant_id",
            "Next": "GetUserGroup"
          }
        ],
        "Default": "FailUserNotFound"
      },
      "GetUserGroup": {
        "Type": "Task",
        "Parameters": {
          "UserPoolId": "${cognitoEntity}",
          "Username.$": "$.User.Username"
        },
        "Resource": "arn:aws:states:::aws-sdk:cognitoidentityprovider:adminListGroupsForUser",
        "ResultPath": "$.Groups",
        "Next": "UnNestGroup"
      },
      "UnNestGroup": {
        "Type": "Pass",
        "Next": "CatchUserNotFoundError",
        "Parameters": {
          "group.$": "$.Groups.Groups[0].GroupName",
          "groupModified.$": "$.Groups.Groups[0].LastModifiedDate"
        },
        "ResultPath": "$.currentGroup"
      },
      "CatchUserNotFoundError": {
        "Type": "Choice",
        "Choices": [
          {
            "And": [
              {
                "Variable": "$.Error",
                "IsPresent": true
              },
              {
                "Variable": "$.Error",
                "StringEquals": "UsernameNotFound"
              }
            ],
            "Next": "UsernameNotFound"
          }
        ],
        "Default": "CheckCorrectGroup"
      },
      "UsernameNotFound": {
        "Type": "Fail",
        "Error": "UsernameNotFound",
        "Cause": "Username Not Found"
      },
      "CheckCorrectGroup": {
        "Type": "Choice",
        "Choices": [
          {
            "Not": {
              "Variable": "$.currentGroup.group",
              "StringEquals": "User"
            },
            "Next": "UserNotInGroup"
          }
        ],
        "Default": "AdminUserGlobalSignOut"
      },
      "UserNotInGroup": {
        "Type": "Fail",
        "Error": "UserNotInCorrectGroup",
        "Cause": "User must be in group 'User'"
      },
      "AdminUserGlobalSignOut": {
        "Type": "Task",
        "Next": "AdminDeleteUser",
        "ResultPath": "$.AdminGlobalSignOut",
        "Parameters": {
          "UserPoolId": "${cognitoEntity}",
          "Username.$": "$.input.User.Username"
        },
        "Resource": "arn:aws:states:::aws-sdk:cognitoidentityprovider:adminUserGlobalSignOut"
      },
      "AdminDeleteUser": {
        "Type": "Task",
        "ResultPath": "$.AdminDeleteUser",
        "Next": "FilterIdJsonPathWorkaround",
        "Parameters": {
          "UserPoolId": "${cognitoEntity}",
          "Username.$": "$.input.User.Username"
        },
        "Resource": "arn:aws:states:::aws-sdk:cognitoidentityprovider:adminDeleteUser"
      },
      "FilterIdJsonPathWorkaround": {
        "Type": "Pass",
        "Next": "Success",
        "ResultPath": "$.userFilter",
        "Parameters": {
          "id.$": "$.User.UserAttributes[?(@.Name==sub)].Value"
        }
      },
      "Success": {
        "Type": "Pass",
        "End": true,
        "Parameters": {
          "id.$": "$.userFilter.id[0]",
          "tenantId.$" : "$.input.tenant_id"
        }
      }
    }
  }